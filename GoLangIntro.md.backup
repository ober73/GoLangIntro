#GoLangIntro#

##Data Types and Variables##

String
Integer
Float

Boolean (true or false)
Arrays & Slices [1,2,4,9]

Maps (key value pairs)


memory allocation

affects how data is stored

example Integer 4 bytes (32-bit machine)
or 8 bytes (64-bit machine)

boolean 1 byte

__So we need memory types of data allocation__



STATIC TYPE example 

if compiler throws an error when types are used incorrectly

C++, Java

Dynamic typed:

Python, Javascript


##Kinds of Data Types##

numbers:

integers and floats


int

uint unsigned (only positive numbers)


Float (contain decimal)

float64 8bytes

string "abc" (always in quotes)16 bytes of memory in Golang

Boolean

Arrays, Slices and Maps



Declare a variable

var name type = value


# Printing a String #

\n new line character

also you can use Println

Printf create string formating


format specifier

%v default format
%d intergers
%T type of value
%c character
%q quoted characters/string
%/s plain string
%t true or false
%f floating numbers
%.2f floating numbers up to 2 decimal places


DECLARING VARIABLES

data type important

Shorthand way of declaring variables (only when of the same value type)

ex: var s,t string = "foo", "bar"

## Short Variable Declaration ##

:= is short variable assignment

VARIABLE SCOPE

defined as BLOCK

brace brackets denote a block

outer block cannot access variables within an inner block

Local vs Global Variables

local declared inside a function or a block

Global variables are declared at the top of the program available to all.

ZERO VALUES

if not declared with value then the var gets a zero value

bool false
int 0
float 0.0
string ""



# USER INPUT #

fmt.Scanf(  ) 


check type of variable

%T will tell us what type of variable

## converting between types ##

Type Casting

wrap around ex: int(f) interget to floa

strconv package

strconv.Itoa(i) convert int to string

Atoi string to int 



# Constants #
const const name data type = value

Two types

typed and untyped


constants by default are untyped


no concept of default or zero values you must declare a value to a constant.


no shorthand declaration of constants

# Operators and Control Flow #

Symbols that help us to do math and logical operations


5 types in GOlang

## Comparison Operators ##

compare and yield boolean value

== equal

!= not equal

< less than

<= less than or equal to

"> greater than"

">= greater than or equal to"


# Arithmetic Operators #

addition 

you can use with strings as well


subtraction

you cannot use this on a string

multiplication

division

modulus returns the remainder

24 / 7 modulus = 3


increment ++


increments value by one

decrement 

by one


# Logical Operators #

AND (&&)


OR (||)

NOT (!)

# ASSINGMENT OPERATORS


asssing (=)


add and assign (+=)

subtract and assign (-=)

multiply and assign (*=)

divide and assign quotient (/=)

divide and assign modulus (%=)

it assigns the remainder to x

# Bitwise Operatores #

bitwise AND (&)

12 = 00001100
25 - 00011001

& 00001100
  00011001
  
  00001000 = 8 (in decimal)
  
  
  bitwise OR (|)
  
  
  you get 1 if either one of the bits are 1
  
  
  bitwise XOR (^)
  
  when both of the bits are opposite then it is 1 when both of the bits are the same then it is 0
  
  
  left shit operator (<<)
  
  it shifts all bits to the left by a number of specified bits and then right is filled with zeros
  
  
  212 << 1
  
  11010100
 110101000
 
 rigth shift operator (>>)
 
 fill the left in with zeros
 
 # Control Flow #
 
 if-else
 
 else if 
 
 # Switch-case #
 
 switch 
 
 		case
 		
 		case
 		
 		default
 		
 		
package main
import "fmt"

func main() {
  var i int =100
  switch i {
    case 10:
      fmt.Println("i is 10")
    case 100, 200: 
      fmt.Println("i is either 100 or 200)
    default:
      fmt.Println("i is neither 0, 100 or 200")}}
      

fallthrough force the execution of the flow

so the next case blocks will also print


# ARRAYS #




elements stored at particular areas of memory

same data type

array declaration

var array name size of the array data type

example:

var grades [5] int

Array Initialization

ex;

var grades [3]int = [3]int{10, 20, 30]}


we can use shorthand declaration as well

grades := [3]int{10, 20, 30}

you can also use elipses [...]

the compiler will calculate size in this case.


len()

the length of the array

indexes in arrays

they start with 0 and ends with len-1

90 86 76 42 95

grades[1] => 86


you can change the element at the index

grades[1] = 100


LOOP through and array:

for i := 0; i < len(grades): i++ {
    fmt.Println(grades[i])
    
    }
    
    
we can also use the range

used for arrays and slices

ex:

for index, element := range grades { 
    fmt.Println(index, "=>", element)
    
}


multidimensional array

2d array example


0 2 4

1 4 16

2 8 64


to go to the second element in the 3rd index type:

arr[2]

